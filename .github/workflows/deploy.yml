name: Deploy PayDay App

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Run linting
      run: npm run lint

    - name: Build application
      run: npm run build

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: payday-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG apps/backend/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster payday-cluster \
          --service payday-backend-service \
          --force-new-deployment

  build-mobile:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Expo
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: Install dependencies
      working-directory: ./apps/mobile
      run: npm ci

    - name: Build Android APK
      working-directory: ./apps/mobile
      run: eas build --platform android --non-interactive

    - name: Build iOS IPA
      working-directory: ./apps/mobile
      run: eas build --platform ios --non-interactive

    - name: Upload Android build
      uses: actions/upload-artifact@v3
      with:
        name: android-build
        path: apps/mobile/build/*.apk

    - name: Upload iOS build
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: apps/mobile/build/*.ipa

  deploy-to-stores:
    needs: build-mobile
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'

    steps:
    - uses: actions/checkout@v3

    - name: Download Android build
      uses: actions/download-artifact@v3
      with:
        name: android-build

    - name: Download iOS build
      uses: actions/download-artifact@v3
      with:
        name: ios-build

    - name: Deploy to Google Play Store
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: com.payday.app
        releaseFiles: "*.apk"
        track: production

    - name: Deploy to App Store Connect
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-id: ${{ secrets.APP_STORE_APP_ID }}
        issuer-id: ${{ secrets.APP_STORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APP_STORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APP_STORE_API_PRIVATE_KEY }}
        ipa-path: "*.ipa"