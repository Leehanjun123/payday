import { prisma } from '../lib/prisma';

async function seedSkills() {
  try {
    const initialSkills = [
      // ÎîîÏûêÏù∏
      { name: 'Î°úÍ≥† ÎîîÏûêÏù∏', category: 'ÎîîÏûêÏù∏', icon: 'üé®' },
      { name: 'Ïõπ ÎîîÏûêÏù∏', category: 'ÎîîÏûêÏù∏', icon: 'üåê' },
      { name: 'Ïï± ÎîîÏûêÏù∏', category: 'ÎîîÏûêÏù∏', icon: 'üì±' },
      { name: 'UI/UX ÎîîÏûêÏù∏', category: 'ÎîîÏûêÏù∏', icon: '‚úèÔ∏è' },
      { name: 'Ìè¨Ïä§ÌÑ∞ ÎîîÏûêÏù∏', category: 'ÎîîÏûêÏù∏', icon: 'üñºÔ∏è' },
      { name: 'ÏùºÎü¨Ïä§Ìä∏', category: 'ÎîîÏûêÏù∏', icon: 'üé≠' },

      // Í∞úÎ∞ú
      { name: 'Ïõπ Í∞úÎ∞ú', category: 'Í∞úÎ∞ú', icon: 'üíª' },
      { name: 'Ïï± Í∞úÎ∞ú', category: 'Í∞úÎ∞ú', icon: 'üì±' },
      { name: 'React', category: 'Í∞úÎ∞ú', icon: '‚öõÔ∏è' },
      { name: 'Node.js', category: 'Í∞úÎ∞ú', icon: 'üü¢' },
      { name: 'Python', category: 'Í∞úÎ∞ú', icon: 'üêç' },
      { name: 'Java', category: 'Í∞úÎ∞ú', icon: '‚òï' },

      // Î≤àÏó≠
      { name: 'ÏòÅÌïú Î≤àÏó≠', category: 'Î≤àÏó≠', icon: 'üá∫üá∏' },
      { name: 'ÌïúÏòÅ Î≤àÏó≠', category: 'Î≤àÏó≠', icon: 'üá∞üá∑' },
      { name: 'ÏùºÌïú Î≤àÏó≠', category: 'Î≤àÏó≠', icon: 'üáØüáµ' },
      { name: 'Ï§ëÌïú Î≤àÏó≠', category: 'Î≤àÏó≠', icon: 'üá®üá≥' },

      // ÎßàÏºÄÌåÖ
      { name: 'SNS ÎßàÏºÄÌåÖ', category: 'ÎßàÏºÄÌåÖ', icon: 'üì¢' },
      { name: 'ÏΩòÌÖêÏ∏† ÎßàÏºÄÌåÖ', category: 'ÎßàÏºÄÌåÖ', icon: 'üìù' },
      { name: 'Ïù∏ÌîåÎ£®Ïñ∏ÏÑú ÎßàÏºÄÌåÖ', category: 'ÎßàÏºÄÌåÖ', icon: 'üåü' },
      { name: 'SEO', category: 'ÎßàÏºÄÌåÖ', icon: 'üîç' },

      // ÍµêÏú°
      { name: 'ÏòÅÏñ¥ Í≥ºÏô∏', category: 'ÍµêÏú°', icon: 'üìö' },
      { name: 'ÏàòÌïô Í≥ºÏô∏', category: 'ÍµêÏú°', icon: 'üî¢' },
      { name: 'ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Í∞ïÏùò', category: 'ÍµêÏú°', icon: 'üë®‚Äçüíª' },
      { name: 'ÏùåÏïÖ Î†àÏä®', category: 'ÍµêÏú°', icon: 'üéµ' },

      // ÏòÅÏÉÅ
      { name: 'ÏòÅÏÉÅ Ìé∏Ïßë', category: 'ÏòÅÏÉÅ', icon: 'üé¨' },
      { name: 'ÏòÅÏÉÅ Ï¥¨ÏòÅ', category: 'ÏòÅÏÉÅ', icon: 'üìπ' },
      { name: 'Î™®ÏÖò Í∑∏ÎûòÌîΩ', category: 'ÏòÅÏÉÅ', icon: 'üéûÔ∏è' },
      { name: 'ÏûêÎßâ Ï†úÏûë', category: 'ÏòÅÏÉÅ', icon: 'üí¨' },

      // Í∏ÄÏì∞Í∏∞
      { name: 'Î∏îÎ°úÍ∑∏ Í∏ÄÏì∞Í∏∞', category: 'Í∏ÄÏì∞Í∏∞', icon: '‚úçÔ∏è' },
      { name: 'Ïπ¥ÌîºÎùºÏù¥ÌåÖ', category: 'Í∏ÄÏì∞Í∏∞', icon: 'üìù' },
      { name: 'Î≥¥ÎèÑÏûêÎ£å ÏûëÏÑ±', category: 'Í∏ÄÏì∞Í∏∞', icon: 'üì∞' },
      { name: 'Ï†úÌíà ÏÑ§Î™Ö ÏûëÏÑ±', category: 'Í∏ÄÏì∞Í∏∞', icon: 'üìã' },
    ];

    let count = 0;
    for (const skill of initialSkills) {
      try {
        await prisma.skill.create({
          data: skill,
        });
        count++;
      } catch (error: any) {
        if (error.code === 'P2002') {
          console.log(`‚ö†Ô∏è  Skill "${skill.name}" already exists, skipping...`);
        } else {
          throw error;
        }
      }
    }

    console.log(`‚úÖ ${count} skills created successfully`);

    // Show all skills
    const allSkills = await prisma.skill.findMany({
      orderBy: [
        { category: 'asc' },
        { name: 'asc' },
      ],
    });

    console.log('\nüìã All skills:');
    let currentCategory = '';
    allSkills.forEach(skill => {
      if (skill.category !== currentCategory) {
        currentCategory = skill.category;
        console.log(`\n${currentCategory}:`);
      }
      console.log(`  ${skill.icon} ${skill.name}`);
    });

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error:', error);
    process.exit(1);
  }
}

seedSkills();