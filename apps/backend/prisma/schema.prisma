// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  phone           String?   @unique
  password        String
  name            String
  profileImage    String?
  bio             String?
  level           Int       @default(1)
  points          Int       @default(0)
  isVerified      Boolean   @default(false)
  isActive        Boolean   @default(true)
  role            UserRole  @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  skills          UserSkill[]
  postedTasks     Task[]      @relation("TaskPoster")
  appliedTasks    TaskApplication[]
  assignedTasks   Task[]      @relation("TaskAssignee")
  reviews         Review[]
  reviewsReceived Review[]    @relation("ReviewReceiver")
  earnings        Earning[]
  notifications   Notification[]
  achievements    UserAchievement[]
  chatRooms       ChatParticipant[]
  messages        Message[]
  messageReads    MessageRead[]
  marketplaceItems MarketplaceItem[]
  bids            Bid[]
  offers          Offer[]
  favorites       UserFavorite[]
  wonAuctions     Auction[]
  portfolios      Portfolio[]
  watchlist       Watchlist[]
  investmentGoals InvestmentGoal[]
  priceAlerts     PriceAlert[]
  predictionAlerts PredictionAlert[]
  analysisAlerts  AnalysisAlert[]

  // New monetization relations
  balance         UserBalance?
  withdrawalRequests WithdrawalRequest[]
  surveyCompletions SurveyCompletion[]
  adImpressions   AdImpression[]
  referralsGiven  ReferralRelation[] @relation("ReferralGiven")
  referralsReceived ReferralRelation[] @relation("ReferralReceived")
  dailyActivity   UserActivity[]
  platformIntegrations PlatformIntegration[]
}

// User roles
enum UserRole {
  USER
  EXPERT
  ADMIN
}

// Skill model
model Skill {
  id          String      @id @default(cuid())
  name        String      @unique
  category    String
  icon        String?
  description String?
  createdAt   DateTime    @default(now())

  // Relations
  users       UserSkill[]
  tasks       TaskSkill[]
}

// User-Skill relation
model UserSkill {
  id          String    @id @default(cuid())
  userId      String
  skillId     String
  level       Int       @default(1) // 1-5 skill level
  verified    Boolean   @default(false)
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  skill       Skill     @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
}

// Task model
model Task {
  id          String      @id @default(cuid())
  title       String
  description String
  category    String
  budget      Float
  duration    Int         // in hours
  status      TaskStatus  @default(OPEN)
  priority    Priority    @default(NORMAL)
  posterId    String
  assigneeId  String?
  deadline    DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  poster        User              @relation("TaskPoster", fields: [posterId], references: [id])
  assignee      User?             @relation("TaskAssignee", fields: [assigneeId], references: [id])
  skills        TaskSkill[]
  applications  TaskApplication[]
  reviews       Review[]
  payment       Payment?
  chatRoom      ChatRoom?
}

// Task status
enum TaskStatus {
  OPEN
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
  CANCELLED
}

// Priority levels
enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// Task-Skill relation
model TaskSkill {
  id      String @id @default(cuid())
  taskId  String
  skillId String

  task    Task   @relation(fields: [taskId], references: [id])
  skill   Skill  @relation(fields: [skillId], references: [id])

  @@unique([taskId, skillId])
}

// Task Application
model TaskApplication {
  id          String    @id @default(cuid())
  taskId      String
  userId      String
  proposal    String
  bidAmount   Float
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime  @default(now())
  respondedAt DateTime?

  task        Task      @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}

// Application status
enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

// Review model
model Review {
  id          String    @id @default(cuid())
  taskId      String
  reviewerId  String
  receiverId  String
  rating      Int       // 1-5
  comment     String?
  createdAt   DateTime  @default(now())

  task        Task      @relation(fields: [taskId], references: [id])
  reviewer    User      @relation(fields: [reviewerId], references: [id])
  receiver    User      @relation("ReviewReceiver", fields: [receiverId], references: [id])

  @@unique([taskId, reviewerId])
}

// Payment model
model Payment {
  id          String        @id @default(cuid())
  taskId      String        @unique
  amount      Float
  fee         Float         // Platform fee
  netAmount   Float         // Amount after fee
  status      PaymentStatus @default(PENDING)
  method      String?       // Payment method
  transactionId String?
  paidAt      DateTime?
  createdAt   DateTime      @default(now())

  task        Task          @relation(fields: [taskId], references: [id])
  earning     Earning?
}

// Payment status
enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

// Earning model - Updated for monetization platform
model Earning {
  id          String        @id @default(cuid())
  userId      String
  paymentId   String?       @unique
  type        EarningType
  amount      Float
  currency    String        @default("USD")
  status      EarningStatus @default(PENDING)
  source      String        // AdMob, CPX_Research, Panel_Now, etc.
  transactionId String?     // External transaction ID
  metadata    Json?         // Additional data (ad unit, survey ID, etc.)
  withdrawnAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User          @relation(fields: [userId], references: [id])
  payment     Payment?      @relation(fields: [paymentId], references: [id])
}

// Earning types for monetization
enum EarningType {
  AD_REWARD      // Google AdMob rewards
  SURVEY         // Survey completions
  CASHBACK       // Shopping cashback
  REFERRAL       // Referral bonuses
  DAILY_BONUS    // Daily login bonus
  STREAK_BONUS   // Consecutive day bonus
  ACHIEVEMENT    // Achievement rewards
  PROMOTION      // Promotional rewards
  TASK_COMPLETION // Legacy task completion
}

// Earning status
enum EarningStatus {
  PENDING
  CONFIRMED
  AVAILABLE
  WITHDRAWN
  FAILED
}

// Notification model
model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  data        Json?     // Additional data
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
}

// Notification types
enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  APPLICATION_RECEIVED
  APPLICATION_ACCEPTED
  APPLICATION_REJECTED
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  ACHIEVEMENT_UNLOCKED
  SYSTEM
}

// Achievement model
model Achievement {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  icon        String
  points      Int
  criteria    Json      // Criteria to unlock
  createdAt   DateTime  @default(now())

  users       UserAchievement[]
}

// User-Achievement relation
model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())

  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

// Chat Room model
model ChatRoom {
  id           String    @id @default(cuid())
  taskId       String    @unique
  task         Task      @relation(fields: [taskId], references: [id])
  messages     Message[]
  participants ChatParticipant[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Chat Participant model
model ChatParticipant {
  id         String   @id @default(cuid())
  room       ChatRoom @relation(fields: [roomId], references: [id])
  roomId     String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  lastReadAt DateTime @default(now())
  createdAt  DateTime @default(now())

  @@unique([roomId, userId])
}

// Message model
model Message {
  id        String        @id @default(cuid())
  content   String
  room      ChatRoom      @relation(fields: [roomId], references: [id])
  roomId    String
  sender    User          @relation(fields: [senderId], references: [id])
  senderId  String
  readBy    MessageRead[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Message Read model
model MessageRead {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
}

// Marketplace Item model
model MarketplaceItem {
  id          String              @id @default(cuid())
  title       String
  description String
  category    String
  condition   ItemCondition
  price       Float
  images      Json                // JSON array of image URLs
  location    String?
  sellerId    String
  status      ItemStatus          @default(ACTIVE)
  views       Int                 @default(0)
  isNegotiable Boolean            @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  seller      User                @relation(fields: [sellerId], references: [id])
  bids        Bid[]
  auction     Auction?
  offers      Offer[]
  favorites   UserFavorite[]
}

// Item condition enum
enum ItemCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR
}

// Item status enum
enum ItemStatus {
  ACTIVE
  SOLD
  RESERVED
  INACTIVE
  DELETED
}

// Auction model
model Auction {
  id          String        @id @default(cuid())
  itemId      String        @unique
  startPrice  Float
  currentBid  Float?
  buyNowPrice Float?
  startTime   DateTime
  endTime     DateTime
  status      AuctionStatus @default(SCHEDULED)
  winnerId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  item        MarketplaceItem @relation(fields: [itemId], references: [id])
  winner      User?           @relation(fields: [winnerId], references: [id])
  bids        Bid[]
}

// Auction status enum
enum AuctionStatus {
  SCHEDULED
  ACTIVE
  ENDED
  CANCELLED
}

// Bid model
model Bid {
  id        String   @id @default(cuid())
  itemId    String
  auctionId String?
  bidderId  String
  amount    Float
  isWinning Boolean  @default(false)
  createdAt DateTime @default(now())

  item      MarketplaceItem @relation(fields: [itemId], references: [id])
  auction   Auction?        @relation(fields: [auctionId], references: [id])
  bidder    User            @relation(fields: [bidderId], references: [id])
}

// Offer model (for direct offers on marketplace items)
model Offer {
  id        String      @id @default(cuid())
  itemId    String
  buyerId   String
  amount    Float
  message   String?
  status    OfferStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  item      MarketplaceItem @relation(fields: [itemId], references: [id])
  buyer     User            @relation(fields: [buyerId], references: [id])
}

// Offer status enum
enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
  EXPIRED
}

// User favorites for marketplace items
model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  itemId    String
  createdAt DateTime @default(now())

  user      User            @relation(fields: [userId], references: [id])
  item      MarketplaceItem @relation(fields: [itemId], references: [id])

  @@unique([userId, itemId])
}

// Investment Portfolio model
model Portfolio {
  id            String          @id @default(cuid())
  userId        String
  name          String
  description   String?
  totalValue    Float           @default(0)
  totalCost     Float           @default(0)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User            @relation(fields: [userId], references: [id])
  holdings      Holding[]
  transactions  Transaction[]
  performance   PortfolioPerformance[]
}

// Investment Holdings model
model Holding {
  id            String        @id @default(cuid())
  portfolioId   String
  symbol        String        // 종목 코드 (예: AAPL, BTC, 삼성전자)
  name          String        // 종목명
  type          AssetType     // 자산 유형
  quantity      Float         // 보유 수량
  averagePrice  Float         // 평균 단가
  currentPrice  Float         @default(0) // 현재가
  totalValue    Float         @default(0) // 총 평가액
  profitLoss    Float         @default(0) // 손익
  profitLossRate Float        @default(0) // 손익률
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  portfolio     Portfolio     @relation(fields: [portfolioId], references: [id])
  transactions  Transaction[]

  @@unique([portfolioId, symbol])
}

// Asset Types
enum AssetType {
  STOCK_KR      // 국내 주식
  STOCK_US      // 미국 주식
  CRYPTO        // 암호화폐
  REAL_ESTATE   // 부동산
  FUND          // 펀드
  BOND          // 채권
  COMMODITY     // 원자재
  ETF           // ETF
}

// Investment Transactions model
model Transaction {
  id            String          @id @default(cuid())
  portfolioId   String
  holdingId     String?
  symbol        String
  type          TransactionType
  quantity      Float
  price         Float
  totalAmount   Float
  fee           Float           @default(0)
  note          String?
  executedAt    DateTime
  createdAt     DateTime        @default(now())

  portfolio     Portfolio       @relation(fields: [portfolioId], references: [id])
  holding       Holding?        @relation(fields: [holdingId], references: [id])
}

// Transaction Types
enum TransactionType {
  BUY
  SELL
  DIVIDEND
  SPLIT
  DEPOSIT
  WITHDRAWAL
}

// Market Data model for caching price information
model MarketData {
  id            String      @id @default(cuid())
  symbol        String      @unique
  name          String
  type          AssetType
  currentPrice  Float
  change        Float       @default(0)
  changePercent Float       @default(0)
  volume        Float       @default(0)
  marketCap     Float?
  high52w       Float?
  low52w        Float?
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
}

// Investment Watchlist
model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  name      String
  type      AssetType
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, symbol])
}

// Investment Education Content
model InvestmentContent {
  id          String        @id @default(cuid())
  title       String
  content     String
  category    ContentCategory
  difficulty  String        // 초급, 중급, 고급
  readTime    Int           // 읽는데 걸리는 시간 (분)
  tags        Json          // 태그 배열
  isPublished Boolean       @default(false)
  viewCount   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Content Categories
enum ContentCategory {
  STOCK_BASICS
  CRYPTO_GUIDE
  REAL_ESTATE
  FUND_INVESTMENT
  MARKET_ANALYSIS
  TAX_GUIDE
  RISK_MANAGEMENT
}

// Investment Goals
model InvestmentGoal {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  targetAmount Float
  currentAmount Float   @default(0)
  targetDate  DateTime?
  category    String    // 은퇴자금, 주택구입, 자녀교육비 등
  isAchieved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
}

// AI Prediction model for market analysis
model Prediction {
  id          String         @id @default(cuid())
  symbol      String
  type        PredictionType
  timeframe   String         // 1일, 1주일, 1개월, 3개월, 6개월, 1년
  currentPrice Float
  predictedPrice Float
  confidence  Float          // 0-100 신뢰도
  reasoning   String         // AI 분석 근거
  factors     Json           // 영향 요소들 (JSON)
  status      PredictionStatus @default(ACTIVE)
  actualPrice Float?         // 실제 결과가
  accuracy    Float?         // 예측 정확도
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  validUntil  DateTime       // 예측 유효 기간

  alerts      PredictionAlert[]
}

// Prediction Types
enum PredictionType {
  PRICE_TARGET    // 목표가 예측
  TREND_ANALYSIS  // 추세 분석
  VOLATILITY     // 변동성 예측
  SUPPORT_RESISTANCE // 지지/저항선
  SENTIMENT      // 시장 심리
}

// Prediction Status
enum PredictionStatus {
  ACTIVE
  EXPIRED
  VERIFIED
  FAILED
}

// Market Analysis model
model MarketAnalysis {
  id          String    @id @default(cuid())
  symbol      String?   // null이면 전체 시장 분석
  title       String
  summary     String    // 간단 요약
  content     String    // 상세 분석 내용
  category    AnalysisCategory
  sentiment   MarketSentiment
  riskLevel   RiskLevel
  tags        Json      // 분석 태그들
  metrics     Json      // 분석 지표들 (RSI, MACD 등)
  recommendations String // 투자 권고사항
  isPublished Boolean   @default(false)
  authorId    String?   // AI 분석의 경우 null
  viewCount   Int       @default(0)
  likeCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  alerts      AnalysisAlert[]
}

// Analysis Categories
enum AnalysisCategory {
  TECHNICAL_ANALYSIS  // 기술적 분석
  FUNDAMENTAL_ANALYSIS // 기본적 분석
  MARKET_OVERVIEW    // 시장 전망
  SECTOR_ANALYSIS    // 섹터 분석
  ECONOMIC_INDICATOR // 경제 지표
  NEWS_IMPACT       // 뉴스 영향 분석
}

// Market Sentiment
enum MarketSentiment {
  VERY_BULLISH
  BULLISH
  NEUTRAL
  BEARISH
  VERY_BEARISH
}

// Risk Level
enum RiskLevel {
  VERY_LOW
  LOW
  MODERATE
  HIGH
  VERY_HIGH
}

// Price Alert model
model PriceAlert {
  id          String      @id @default(cuid())
  userId      String
  symbol      String
  name        String      // 종목명
  type        AlertType
  targetPrice Float
  currentPrice Float
  condition   AlertCondition // 이상/이하/동일
  isActive    Boolean     @default(true)
  isTriggered Boolean     @default(false)
  triggeredAt DateTime?
  message     String?     // 커스텀 메시지
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id])
}

// Alert Types
enum AlertType {
  PRICE_TARGET    // 목표가 알림
  PERCENTAGE_CHANGE // 등락률 알림
  VOLUME_SPIKE    // 거래량 급증
  TECHNICAL_SIGNAL // 기술적 신호
}

// Alert Conditions
enum AlertCondition {
  ABOVE       // 이상
  BELOW       // 이하
  EQUALS      // 동일
}

// Prediction Alert model (예측 기반 알림)
model PredictionAlert {
  id           String    @id @default(cuid())
  userId       String
  predictionId String
  type         String    // 예측 달성, 신뢰도 변화 등
  message      String
  isRead       Boolean   @default(false)
  createdAt    DateTime  @default(now())

  user         User      @relation(fields: [userId], references: [id])
  prediction   Prediction @relation(fields: [predictionId], references: [id])
}

// Analysis Alert model (분석 기반 알림)
model AnalysisAlert {
  id         String    @id @default(cuid())
  userId     String
  analysisId String
  type       String    // 새로운 분석, 리스크 변화 등
  message    String
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id])
  analysis   MarketAnalysis @relation(fields: [analysisId], references: [id])
}

// Portfolio Performance Tracking
model PortfolioPerformance {
  id          String    @id @default(cuid())
  portfolioId String
  date        DateTime  // 성과 측정 날짜
  totalValue  Float     // 당일 총 자산가치
  totalCost   Float     // 당일 총 투입금액
  dayChange   Float     // 일일 변동액
  dayChangePercent Float // 일일 변동률
  benchmark   String?   // 벤치마크 지수
  benchmarkReturn Float? // 벤치마크 수익률
  createdAt   DateTime  @default(now())

  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])

  @@unique([portfolioId, date])
}

// ===== NEW MONETIZATION MODELS =====

// User Balance model for real-time balance tracking
model UserBalance {
  id              String    @id @default(cuid())
  userId          String    @unique
  totalBalance    Float     @default(0)
  pendingBalance  Float     @default(0)
  lifetimeEarnings Float    @default(0)
  withdrawnAmount Float     @default(0)
  currency        String    @default("USD")
  lastUpdated     DateTime  @updatedAt
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id])
  withdrawals     WithdrawalRequest[]
}

// Withdrawal Request model
model WithdrawalRequest {
  id              String           @id @default(cuid())
  userId          String
  balanceId       String
  amount          Float
  fee             Float            @default(0)
  netAmount       Float            // Amount after fee
  method          WithdrawalMethod
  accountDetails  Json             // Bank account, PayPal, etc.
  status          WithdrawalStatus @default(PENDING)
  processedAt     DateTime?
  failureReason   String?
  transactionId   String?          // External transaction ID
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  user            User             @relation(fields: [userId], references: [id])
  balance         UserBalance      @relation(fields: [balanceId], references: [id])
}

// Withdrawal methods
enum WithdrawalMethod {
  TOSS_PAY
  BANK_TRANSFER
  PAYPAL
  CRYPTO_WALLET
}

// Withdrawal status
enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Survey Completion tracking
model SurveyCompletion {
  id              String    @id @default(cuid())
  userId          String
  surveyId        String    // External survey ID
  provider        String    // CPX_Research, Panel_Now, etc.
  title           String
  reward          Float
  currency        String    @default("USD")
  status          SurveyCompletionStatus @default(PENDING)
  transactionId   String?   // Provider transaction ID
  verifiedAt      DateTime?
  metadata        Json?     // Survey details, completion time, etc.
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id])

  @@unique([userId, surveyId, provider])
}

// Survey completion status
enum SurveyCompletionStatus {
  PENDING
  VERIFIED
  PAID
  REJECTED
  FAILED
}

// Ad Impression tracking for AdMob
model AdImpression {
  id              String    @id @default(cuid())
  userId          String
  adUnitId        String
  adType          AdType
  reward          Float     @default(0)
  currency        String    @default("USD")
  impressionId    String?   // AdMob impression ID
  status          AdImpressionStatus @default(PENDING)
  deviceInfo      Json?     // Device fingerprint for fraud prevention
  timestamp       DateTime  @default(now())
  verifiedAt      DateTime?

  user            User      @relation(fields: [userId], references: [id])

  @@unique([userId, impressionId])
}

// Ad types
enum AdType {
  REWARDED
  INTERSTITIAL
  BANNER
  NATIVE
}

// Ad impression status
enum AdImpressionStatus {
  PENDING
  VERIFIED
  PAID
  INVALID
  FRAUD
}

// Referral System
model ReferralRelation {
  id              String    @id @default(cuid())
  referrerId      String    // User who referred
  refereeId       String    // User who was referred
  code            String    // Referral code used
  status          ReferralStatus @default(PENDING)
  signupBonus     Float     @default(0)
  milestoneBonus  Float     @default(0)
  totalBonus      Float     @default(0)
  completedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  referrer        User      @relation("ReferralGiven", fields: [referrerId], references: [id])
  referee         User      @relation("ReferralReceived", fields: [refereeId], references: [id])

  @@unique([referrerId, refereeId])
}

// Referral status
enum ReferralStatus {
  PENDING        // Referee signed up but not active
  ACTIVE         // Referee is active user
  COMPLETED      // All bonuses paid
  EXPIRED        // Referral expired
}

// User Daily Activity for streaks and bonuses
model UserActivity {
  id              String    @id @default(cuid())
  userId          String
  date            DateTime
  loginCount      Int       @default(0)
  adWatched       Int       @default(0)
  surveysCompleted Int      @default(0)
  earningsGenerated Float   @default(0)
  streakDays      Int       @default(0)
  bonusEarned     Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

// Platform Integration tracking
model PlatformIntegration {
  id              String    @id @default(cuid())
  userId          String
  platform        String    // CashWalk, Swagbucks, etc.
  platformUserId  String?   // User ID on external platform
  apiKey          String?   // Encrypted API key if needed
  status          IntegrationStatus @default(PENDING)
  lastSync        DateTime?
  totalEarnings   Float     @default(0)
  currency        String    @default("USD")
  metadata        Json?     // Platform-specific data
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id])

  @@unique([userId, platform])
}

// Integration status
enum IntegrationStatus {
  PENDING
  CONNECTED
  SYNCING
  ERROR
  DISCONNECTED
}